/*!
 * # Semantic UI - Loader
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
/*******************************
            Theme
*******************************/

//@type    : 'element';
//@element : 'loader';
//
//@import (multiple) '../../theme.config';

/*******************************
            Loader
*******************************/

@grey             : #767676;
@emSize   : 14px;

@loaderTopOffset: 50%;
@loaderLeftOffset: 50%;

@circularRadius                : 500rem;

//@loaderSize              : @relativeBig;
@loaderSpeed             : 0.6s;
@loaderLineWidth         : 0.2em;
@loaderFillColor         : rgba(0, 0, 0, 0.1);
@loaderLineColor         : @grey;

@invertedLoaderFillColor : rgba(255, 255, 255, 0.15);
@invertedLoaderLineColor : @white;

@shapeBorderColor: @loaderLineColor transparent transparent;

@14px : unit( (14 / @emSize), rem);
@16px : unit( (16 / @emSize), rem);
@24px : unit( (24 / @emSize), rem);
@32px : unit( (32 / @emSize), rem);
@48px : unit( (48 / @emSize), rem);
@52px : unit( (52 / @emSize), rem);
@58px : unit( (58 / @emSize), rem);
@64px : unit( (64 / @emSize), rem);

@mini    : @14px;
@tiny    : @16px;
@small   : @24px;
@medium  : @32px;
@large   : @48px;
@big     : @52px;
@huge    : @58px;
@massive : @64px;

@miniSize        : (11 / 14);
@tinySize        : (12 / 14);
@smallSize       : (13 / 14);
@mediumSize      : (14 / 14);
@largeSize       : (16 / 14);
@bigSize         : (18 / 14);
@hugeSize        : (20 / 14);
@massiveSize     : (24 / 14);

@miniOffset: 0em 0em 0em -((@mini / 2));
@tinyOffset: 0em 0em 0em -((@tiny / 2));
@smallOffset: 0em 0em 0em -((@small / 2));
@mediumOffset: 0em 0em 0em -((@medium / 2));
@largeOffset: 0em 0em 0em -((@large / 2));
@bigOffset: 0em 0em 0em -((@big / 2));
@hugeOffset: 0em 0em 0em -((@huge / 2));
@massiveOffset: 0em 0em 0em -((@massive / 2));

@relativeMini    : unit( (round(@miniSize * @emSize) / @emSize), em);
@relativeTiny    : unit( (round(@tinySize * @emSize) / @emSize), em);
@relativeSmall   : unit( (round(@smallSize * @emSize) / @emSize), em);
@relativeMedium  : unit( (round(@mediumSize * @emSize) / @emSize), em);
@relativeLarge   : unit( (round(@largeSize * @emSize) / @emSize), em);
@relativeBig     : unit( (round(@bigSize * @emSize) / @emSize), em);
@relativeHuge    : unit( (round(@hugeSize * @emSize) / @emSize), em);
@relativeMassive : unit( (round(@massiveSize * @emSize) / @emSize), em);

@tinyFontSize: @relativeTiny;
@miniFontSize: @relativeMini;
@smallFontSize: @relativeSmall;
@mediumFontSize: @relativeMedium;
@largeFontSize: @relativeLarge;
@bigFontSize: @relativeBig;
@hugeFontSize: @relativeHuge;
@massiveFontSize: @relativeMassive;

@loaderTextColor         : rgba(0,0,0,.87);;
@invertedTextColor       : rgba(255, 255, 255, 0.9);
@invertedLoaderTextColor: @invertedTextColor;

@invertedShapeBorderColor: @invertedLoaderLineColor transparent transparent;

@indeterminateDirection: reverse;
@indeterminateSpeed: (2 * @loaderSpeed);

@textDistance: @relativeMini;

@inlineVerticalAlign: middle;
@inlineMargin: 0em;

/* Standard Size */
.loader {
  display: none;
  position: absolute;
  top: @loaderTopOffset;
  left: @loaderLeftOffset;
  margin: 0px;
  text-align: center;
  z-index: 1000;
  transform: translateX(-50%) translateY(-50%);
}

/* Static Shape */
.loader:before {
  position: absolute;
  content: '';
  top: 0%;
  left: 50%;
  width: 100%;
  height: 100%;

  border-radius: @circularRadius;
  border: @loaderLineWidth solid @loaderFillColor;
}

/* Active Shape */
.loader:after {
  position: absolute;
  content: '';
  top: 0%;
  left: 50%;
  width: 100%;
  height: 100%;

  animation: loader @loaderSpeed linear;
  animation-iteration-count: infinite;

  border-radius: @circularRadius;

  border-color: @shapeBorderColor;
  border-style: solid;
  border-width: @loaderLineWidth;

  box-shadow: 0px 0px 0px 1px transparent;
}

/* Active Animation */
@keyframes loader {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* Sizes */
.mini.loader:before,
.mini.loader:after {
  width: @mini;
  height: @mini;
  margin: @miniOffset;
}
.tiny.loader:before,
.tiny.loader:after {
  width: @tiny;
  height: @tiny;
  margin: @tinyOffset;
}
.small.loader:before,
.small.loader:after {
  width: @small;
  height: @small;
  margin: @smallOffset;
}
.loader:before,
.loader:after {
  width: @medium;
  height: @medium;
  margin: @mediumOffset;
}
.large.loader:before,
.large.loader:after {
  width: @large;
  height: @large;
  margin: @largeOffset;
}
.big.loader:before,
.big.loader:after {
  width: @big;
  height: @big;
  margin: @bigOffset;
}
.huge.loader:before,
.huge.loader:after {
  width: @huge;
  height: @huge;
  margin: @hugeOffset;
}
.massive.loader:before,
.massive.loader:after {
  width: @massive;
  height: @massive;
  margin: @massiveOffset;
}

/*-------------------
      Coupling
--------------------*/

/* Show inside active dimmer */
.dimmer .loader {
  display: block;
}

/* Black Dimmer */
.dimmer .loader {
  color: @invertedLoaderTextColor;
}
.dimmer .loader:before {
  border-color: @invertedLoaderFillColor;
}
.dimmer .loader:after {
  border-color: @invertedShapeBorderColor;
}

/* White Dimmer (Inverted) */
.inverted.dimmer .loader {
  color: @loaderTextColor;
}
.inverted.dimmer .loader:before {
  border-color: @loaderFillColor;
}
.inverted.dimmer .loader:after {
  border-color: @shapeBorderColor;
}

/*******************************
             Types
*******************************/


/*-------------------
        Text
--------------------*/

.text.loader {
  width: auto !important;
  height: auto !important;
  text-align: center;
  font-style: normal;
}


/*******************************
            States
*******************************/

.indeterminate.loader:after {
  animation-direction: @indeterminateDirection;
  animation-duration: @indeterminateSpeed;
}

.loader.active,
.loader.visible {
  display: block;
}
.loader.disabled,
.loader.hidden {
  display: none;
}

/*******************************
            Variations
*******************************/


/*-------------------
        Sizes
--------------------*/


/* Loader */
.inverted.dimmer .mini.loader,
.mini.loader {
  width: @mini;
  height: @mini;
  font-size: @miniFontSize;
}
.inverted.dimmer .tiny.loader,
.tiny.loader {
  width: @tiny;
  height: @tiny;
  font-size: @tinyFontSize;
}
.inverted.dimmer .small.loader,
.small.loader {
  width: @small;
  height: @small;
  font-size: @smallFontSize;
}
.inverted.dimmer .loader,
.loader {
  width: @medium;
  height: @medium;
  font-size: @mediumFontSize;
}
.inverted.dimmer .large.loader,
.large.loader {
  width: @large;
  height: @large;
  font-size: @largeFontSize;
}
.inverted.dimmer .big.loader,
.big.loader {
  width: @big;
  height: @big;
  font-size: @bigFontSize;
}
.inverted.dimmer .huge.loader,
.huge.loader {
  width: @huge;
  height: @huge;
  font-size: @hugeFontSize;
}
.inverted.dimmer .massive.loader,
.massive.loader {
  width: @massive;
  height: @massive;
  font-size: @massiveFontSize;
}

/* Text Loader */
.mini.text.loader {
  min-width: @mini;
  padding-top: (@mini + @textDistance);
}
.tiny.text.loader {
  min-width: @tiny;
  padding-top: (@tiny + @textDistance);
}
.small.text.loader {
  min-width: @small;
  padding-top: (@small + @textDistance);
}
.text.loader {
  min-width: @medium;
  padding-top: (@medium + @textDistance);
}
.large.text.loader {
  min-width: @large;
  padding-top: (@large + @textDistance);
}
.big.text.loader {
  min-width: @big;
  padding-top: (@big + @textDistance);
}
.huge.text.loader {
  min-width: @huge;
  padding-top: (@huge + @textDistance);
}
.massive.text.loader {
  min-width: @massive;
  padding-top: (@massive + @textDistance);
}


/*-------------------
       Inverted
--------------------*/

.inverted.loader {
  color: @invertedLoaderTextColor
}
.inverted.loader:before {
  border-color: @invertedLoaderFillColor;
}
.inverted.loader:after {
  border-top-color: @invertedLoaderLineColor;
}

/*-------------------
       Inline
--------------------*/

.inline.loader {
  position: relative;
  vertical-align: @inlineVerticalAlign;
  margin: @inlineMargin;
  left: 0em;
  top: 0em;
  transform: none;
}

.inline.loader.active,
.inline.loader.visible {
  display: inline-block;
}

/* Centered Inline = .center-block*/
//.centered.inline.loader.active,
//.centered.inline.loader.visible {
//  display: block;
//  margin-left: auto;
//  margin-right: auto;
//}


//.loadUIOverrides();
